class Solution {
    public long minIncrementOperations(int[] nums, int k) {  
              int n=nums.length;
              long []dp=new long[n]; 

            //   dp[0]=Math.max(0,k-nums[0]);
            //    dp[1]=Math.max(0,k-nums[1]);
            //     dp[2]=Math.max(0,k-nums[2]); 

            //     for(int i=3;i<n;i++){
            //         dp[i]=Math.max(0,k-nums[i])+Math.min(dp[i-1],Math.min(dp[i-2],dp[i-3]));
            //     } 

            //     return Math.min(dp[n-1],Math.min(dp[n-2],dp[n-3])); 


            Arrays.fill(dp,-1); 

            return memo(nums,0,k,dp);
    } 

    public long memo(int []arr,int i,int k,long []dp){
        if(i>arr.length-3){
            return 0;
        }   

        if(dp[i]!=-1){
            return dp[i];
        }

       long ans1=Math.max(0,k-arr[i])+memo(arr,i+1,k,dp);
       long ans2=Math.max(0,k-arr[i+1])+memo(arr,i+2,k,dp);
       long ans3=Math.max(0,k-arr[i+2])+memo(arr,i+3,k,dp); 

       return dp[i]=Math.min(ans1,Math.min(ans2,ans3));
    }
}
