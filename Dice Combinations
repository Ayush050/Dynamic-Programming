package DP;
import java.util.*;
public class DiceCombinations {
   static long MOD=1000000007; 
   public static long mod_add(long a,long b,long m) {
	    a = a % m;
	    b = b % m;
	    return (((a + b) % m) + m) % m;
   }
	public static void main(String[] args) {
		// TODO Auto-generated method stub 
		Scanner sc=new Scanner(System.in); 
		int n=sc.nextInt(); 
		long []dp=new long[1000005];
		Arrays.fill(dp, -1);
		//System.out.println(helper(n,dp)%MOD);
		
		System.out.println(iterativeDP(n));

	} 
	public static long helper(int n,long []dp) {
		  if(n==0) {
			  return 1;
		  } 
		  if(n<0) {
			  return 0;
		  } 
		  if(dp[n]!=-1) {
			  return dp[n];
		  }
		  
		  long ans=0; 
		 
		  for(int i=1;i<=6;i++) {
			  if(i<=n) {
			      // ans=(ans+helper(n-i,dp))%MOD;
				  ans=mod_add(ans,helper(n-i,dp),MOD);
			  }
		  }
		 
		  return dp[n]=ans%MOD;
	} 
	
	public static long iterativeDP(int n) { 
		
		long []dp=new long[n+1]; 
		dp[0]=1;
		
		for(int i=1;i<=n;i++) {
			for(int j=1;j<=6;j++) {
				if(j<=i) {
					dp[i]=(dp[i]+dp[i-j])%MOD;
				}
			}
		} 
		return dp[n];
		
	}

}
