class Solution {
    public String longestPalindrome(String s) {
       return LPS(s);
    } 

   public static String LPS(String s) { 
       int n=s.length();
       int [][]dp=new int[n][n];

       String ans="";
       int maxlen=0;
      for (int diff = 0; diff < n; diff++) {
        int i = 0;
        int j = i + diff;
        while (j < n) {
            if (diff==0) {
                dp[i][j] = 1; // (diff==0) length 1 strings are palindromic
            } 
            else if (diff == 1) { // this is for length 2
                if (s.charAt(i) == s.charAt(j)) { // if both chars are the same then length 2 is palindromic
                    dp[i][j] = 2;
                }
            else {
                    dp[i][j] = 0; // if not same then 0
                }
            } 
            else 
            {
                if (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1] > 0)
                 {
                    dp[i][j] = 2 + dp[i + 1][j - 1];
                }
            }

            if (dp[i][j] > 0) {
                int len = j - i + 1;
                if (len > maxlen) {
                    maxlen = len;
                    ans = s.substring(i, j+1);
                }
            }
            i++;
            j++;
        }
    }
    return ans;
   }
}
